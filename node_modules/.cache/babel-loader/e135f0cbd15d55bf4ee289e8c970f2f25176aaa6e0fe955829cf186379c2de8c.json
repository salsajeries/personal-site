{"ast":null,"code":"import b, { useMemo as w, useRef as f, useEffect as v, forwardRef as C, useImperativeHandle as E } from \"react\";\nimport { OverlayScrollbars as R } from \"overlayscrollbars\";\nconst O = () => {\n    if (typeof window > \"u\") {\n      const n = () => {};\n      return [n, n];\n    }\n    let l, c;\n    const t = window,\n      o = typeof t.requestIdleCallback == \"function\",\n      a = t.requestAnimationFrame,\n      i = t.cancelAnimationFrame,\n      r = o ? t.requestIdleCallback : a,\n      u = o ? t.cancelIdleCallback : i,\n      s = () => {\n        u(l), i(c);\n      };\n    return [(n, e) => {\n      s(), l = r(o ? () => {\n        s(), c = a(n);\n      } : n, typeof e == \"object\" ? e : {\n        timeout: 2233\n      });\n    }, s];\n  },\n  S = l => {\n    const {\n        options: c,\n        events: t,\n        defer: o\n      } = l || {},\n      [a, i] = w(O, []),\n      r = f(null),\n      u = f(o),\n      s = f(c),\n      n = f(t);\n    return v(() => {\n      u.current = o;\n    }, [o]), v(() => {\n      const {\n        current: e\n      } = r;\n      s.current = c, R.valid(e) && e.options(c || {}, !0);\n    }, [c]), v(() => {\n      const {\n        current: e\n      } = r;\n      n.current = t, R.valid(e) && e.on(t || {}, !0);\n    }, [t]), v(() => () => {\n      var e;\n      i(), (e = r.current) == null || e.destroy();\n    }, []), w(() => [e => {\n      const y = r.current;\n      if (R.valid(y)) return;\n      const d = u.current,\n        I = s.current || {},\n        m = n.current || {},\n        p = () => r.current = R(e, I, m);\n      d ? a(p, d) : p();\n    }, () => r.current], []);\n  },\n  F = (l, c) => {\n    const {\n        element: t = \"div\",\n        options: o,\n        events: a,\n        defer: i,\n        children: r,\n        ...u\n      } = l,\n      s = t,\n      n = f(null),\n      e = f(null),\n      [y, d] = S({\n        options: o,\n        events: a,\n        defer: i\n      });\n    return v(() => {\n      const {\n          current: I\n        } = n,\n        {\n          current: m\n        } = e;\n      return I && m && y({\n        target: I,\n        elements: {\n          viewport: m,\n          content: m\n        }\n      }), () => {\n        var p;\n        return (p = d()) == null ? void 0 : p.destroy();\n      };\n    }, [y, t]), E(c, () => ({\n      osInstance: d,\n      getElement: () => n.current\n    }), []), /* @__PURE__ */b.createElement(s, {\n      \"data-overlayscrollbars-initialize\": \"\",\n      ref: n,\n      ...u\n    }, /* @__PURE__ */b.createElement(\"div\", {\n      ref: e\n    }, r));\n  },\n  A = C(F);\nexport { A as OverlayScrollbarsComponent, S as useOverlayScrollbars };","map":{"version":3,"mappings":"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","names":["createDefer","window","noop","rafId","wnd","idleSupported","requestIdleCallback","rAF","requestAnimationFrame","cAF","cancelAnimationFrame","rIdle","cIdle","cancelIdleCallback","clear","idleId","callback","options","timeout","useOverlayScrollbars","params","events","defer","requestDefer","cancelDefer","useMemo","instanceRef","useRef","deferRef","optionsRef","eventsRef","current","useEffect","instance","OverlayScrollbars","valid","on","_a","destroy","target","presentInstance","currDefer","currOptions","currEvents","init","OverlayScrollbarsComponent","props","ref","element","children","other","Tag","elementRef","childrenRef","initialize","osInstance","elm","childrenElm","elements","viewport","content","useImperativeHandle","getElement","OverlayScrollbarsComponentForwardedRef","forwardRef"],"sources":["/Users/salwajeries/repos/personal-site/personal-site/node_modules/src/useOverlayScrollbars.ts","/Users/salwajeries/repos/personal-site/personal-site/node_modules/src/OverlayScrollbarsComponent.tsx"],"sourcesContent":["import { useEffect, useMemo, useRef } from 'react';\r\nimport { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { InitializationTarget } from 'overlayscrollbars';\r\nimport type {\r\n  OverlayScrollbarsComponentProps,\r\n  OverlayScrollbarsComponentRef,\r\n} from './OverlayScrollbarsComponent';\r\n\r\ntype Defer = [\r\n  requestDefer: (callback: () => any, options?: OverlayScrollbarsComponentProps['defer']) => void,\r\n  cancelDefer: () => void\r\n];\r\n\r\nexport interface UseOverlayScrollbarsParams {\r\n  /** OverlayScrollbars options. */\r\n  options?: OverlayScrollbarsComponentProps['options'];\r\n  /** OverlayScrollbars events. */\r\n  events?: OverlayScrollbarsComponentProps['events'];\r\n  /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n  defer?: OverlayScrollbarsComponentProps['defer'];\r\n}\r\n\r\nexport type UseOverlayScrollbarsInitialization = (target: InitializationTarget) => void;\r\n\r\nexport type UseOverlayScrollbarsInstance = () => ReturnType<\r\n  OverlayScrollbarsComponentRef['osInstance']\r\n>;\r\n\r\nconst createDefer = (): Defer => {\r\n  /* c8 ignore start */\r\n  if (typeof window === 'undefined') {\r\n    // mock ssr calls with \"noop\"\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noop = () => {};\r\n    return [noop, noop];\r\n  }\r\n  /* c8 ignore end */\r\n\r\n  let idleId: number;\r\n  let rafId: number;\r\n  const wnd = window;\r\n  const idleSupported = typeof wnd.requestIdleCallback === 'function';\r\n  const rAF = wnd.requestAnimationFrame;\r\n  const cAF = wnd.cancelAnimationFrame;\r\n  const rIdle = idleSupported ? wnd.requestIdleCallback : rAF;\r\n  const cIdle = idleSupported ? wnd.cancelIdleCallback : cAF;\r\n  const clear = () => {\r\n    cIdle(idleId);\r\n    cAF(rafId);\r\n  };\r\n\r\n  return [\r\n    (callback, options) => {\r\n      clear();\r\n      idleId = rIdle(\r\n        idleSupported\r\n          ? () => {\r\n              clear();\r\n              // inside idle its best practice to use rAF to change DOM for best performance\r\n              rafId = rAF(callback);\r\n            }\r\n          : callback,\r\n        typeof options === 'object' ? options : { timeout: 2233 }\r\n      );\r\n    },\r\n    clear,\r\n  ];\r\n};\r\n\r\n/**\r\n * Hook for advanced usage of OverlayScrollbars. (When the OverlayScrollbarsComponent is not enough)\r\n * @param params Parameters for customization.\r\n * @returns A tuple with two values:\r\n * The first value is the initialization function, it takes one argument which is the `InitializationTarget`.\r\n * The second value is a function which returns the current OverlayScrollbars instance or `null` if not initialized.\r\n */\r\nexport const useOverlayScrollbars = (\r\n  params?: UseOverlayScrollbarsParams\r\n): [UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance] => {\r\n  const { options, events, defer } = params || {};\r\n  const [requestDefer, cancelDefer] = useMemo<Defer>(createDefer, []);\r\n  const instanceRef = useRef<ReturnType<UseOverlayScrollbarsInstance>>(null);\r\n  const deferRef = useRef(defer);\r\n  const optionsRef = useRef(options);\r\n  const eventsRef = useRef(events);\r\n\r\n  useEffect(() => {\r\n    deferRef.current = defer;\r\n  }, [defer]);\r\n\r\n  useEffect(() => {\r\n    const { current: instance } = instanceRef;\r\n\r\n    optionsRef.current = options;\r\n\r\n    if (OverlayScrollbars.valid(instance)) {\r\n      instance.options(options || {}, true);\r\n    }\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const { current: instance } = instanceRef;\r\n\r\n    eventsRef.current = events;\r\n\r\n    if (OverlayScrollbars.valid(instance)) {\r\n      instance.on(events || {}, true);\r\n    }\r\n  }, [events]);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      cancelDefer();\r\n      instanceRef.current?.destroy();\r\n    },\r\n    []\r\n  );\r\n\r\n  return useMemo<[UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance]>(\r\n    () => [\r\n      (target) => {\r\n        // if already initialized do nothing\r\n        const presentInstance = instanceRef.current;\r\n        if (OverlayScrollbars.valid(presentInstance)) {\r\n          return;\r\n        }\r\n\r\n        const currDefer = deferRef.current;\r\n        const currOptions = optionsRef.current || {};\r\n        const currEvents = eventsRef.current || {};\r\n        const init = () =>\r\n          (instanceRef.current = OverlayScrollbars(target, currOptions, currEvents));\r\n\r\n        if (currDefer) {\r\n          requestDefer(init, currDefer);\r\n        } else {\r\n          init();\r\n        }\r\n      },\r\n      () => instanceRef.current,\r\n    ],\r\n    []\r\n  );\r\n};\r\n","import { forwardRef, useEffect, useRef, useImperativeHandle } from 'react';\r\nimport type { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { PartialOptions, EventListeners } from 'overlayscrollbars';\r\nimport type { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react';\r\nimport { useOverlayScrollbars } from './useOverlayScrollbars';\r\n\r\nexport type OverlayScrollbarsComponentProps<T extends keyof JSX.IntrinsicElements = 'div'> =\r\n  ComponentPropsWithoutRef<T> & {\r\n    /** Tag of the root element. */\r\n    element?: T;\r\n    /** OverlayScrollbars options. */\r\n    options?: PartialOptions | false | null;\r\n    /** OverlayScrollbars events. */\r\n    events?: EventListeners | false | null;\r\n    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n    defer?: boolean | IdleRequestOptions;\r\n  };\r\n\r\nexport interface OverlayScrollbarsComponentRef<T extends keyof JSX.IntrinsicElements = 'div'> {\r\n  /** Returns the OverlayScrollbars instance or null if not initialized. */\r\n  osInstance(): OverlayScrollbars | null;\r\n  /** Returns the root element. */\r\n  getElement(): ElementRef<T> | null;\r\n}\r\n\r\nconst OverlayScrollbarsComponent = <T extends keyof JSX.IntrinsicElements>(\r\n  props: OverlayScrollbarsComponentProps<T>,\r\n  ref: ForwardedRef<OverlayScrollbarsComponentRef<T>>\r\n) => {\r\n  const { element = 'div', options, events, defer, children, ...other } = props;\r\n  const Tag = element;\r\n  const elementRef = useRef<ElementRef<T>>(null);\r\n  const childrenRef = useRef<HTMLDivElement>(null);\r\n  const [initialize, osInstance] = useOverlayScrollbars({ options, events, defer });\r\n\r\n  useEffect(() => {\r\n    const { current: elm } = elementRef;\r\n    const { current: childrenElm } = childrenRef;\r\n    if (elm && childrenElm) {\r\n      initialize({\r\n        target: elm as any,\r\n        elements: {\r\n          viewport: childrenElm,\r\n          content: childrenElm,\r\n        },\r\n      });\r\n    }\r\n    return () => osInstance()?.destroy();\r\n  }, [initialize, element]);\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => {\r\n      return {\r\n        osInstance,\r\n        getElement: () => elementRef.current,\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <Tag data-overlayscrollbars-initialize=\"\" ref={elementRef} {...other}>\r\n      <div ref={childrenRef}>{children}</div>\r\n    </Tag>\r\n  );\r\n};\r\n\r\nconst OverlayScrollbarsComponentForwardedRef = forwardRef(OverlayScrollbarsComponent) as <\r\n  T extends keyof JSX.IntrinsicElements\r\n>(\r\n  props: OverlayScrollbarsComponentProps<T> & {\r\n    ref?: ForwardedRef<OverlayScrollbarsComponentRef<T>>;\r\n  }\r\n) => ReturnType<typeof OverlayScrollbarsComponent>;\r\n\r\nexport { OverlayScrollbarsComponentForwardedRef as OverlayScrollbarsComponent };\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}